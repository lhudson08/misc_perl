PopSim <- function(Rs, NO, years = 50, sims=10){#
	sim.RM <- matrix(sample(Rs, size=sims*years, replace=TRUE),#
	nrow=years, ncol=sims)#
	output <- numeric(years + 1)#
	output[1] <- NO#
	outmat <- sapply(1:sims, function(i){#
		for (t in 1:years) output[t + 1] <- round(output[t] * sim.RM[t,i], 0)#
		output#
	})#
	return(outmat)#
}
p.out <- PopSim(R.obs, NO, years=(2010-2005), sims=10)
matplot(0:(2010-2005), p.out, type="l")
matplot(0:(2010-2005), p.out, type="l", ylab="Population size", xlab="Year")
log(1)
exp(10)
exp(2)*2
exp(2*2)
?log
Nt <- 2 * 10^9
Nt
NO <- 1000
Nt <- 2 * 10^9#
NO <- 1000#
t <- 6#
r <- (log(Nt/NO)/t)
r
exp(2.418*6)
10^9
(10^9)/1000
exp(r*t)
(10^9)/1000
log(2)/r
NO <- 630*10^6#
Nt <- 6.3*10^9#
t <- 2003 - 1700#
r <- log(Nt/No)/t
r <- log(Nt/NO)/t
r
Nt.s <- function(NO, r, t){#
	NO * log(r*t)#
}
Nt.fun <- function(NO, r, t){#
	NO * log(r*t)#
}
Nt.s <- Nt.fun(NO, r, t)
Nt.s
Nt.s <- Nt.fun(NO, r, 1:10)
Nt.s
Nt.s <- Nt.fun(NO, r, 1:(2003-1700))
Nt.s
Nt.s <- Nt.fun(NO, r, 1700:2003)
Nt.s
plot(1700:2003, Nt.s)
plot(1700:2003, Nt.s, log="y")
plot(1700:2003, Nt.s, log="y", type="l")
data(sparrows)
attach(sparrows)
R.obs <- Count[-1]/Count[-length(Count)]
R.obs
plot(Count[-length(Count)], R.obs, type="p")
?lm
lm(Count[-length(Count)] ~ R.obs)
plot(Count[-length(Count)], R.obs, type="p")#
#
lines(lm(Count[-length(Count)] ~ R.obs))
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)#
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)#
group <- gl(2,10,20, labels=c("Ctl","Trt"))#
weight <- c(ctl, trt)#
lm.D9 <- lm(weight ~ group)#
lm.D90 <- lm(weight ~ group - 1) # omitting intercept#
#
anova(lm.D9)#
summary(lm.D90)#
#
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))#
plot(lm.D9, las = 1)      # Residuals, Fitted, ...#
par(opar)
lm.D9
plot(lm.D9, las = 1)
summary(lm.res)
lm.res <- lm(Count[-length(Count)] ~ R.obs)
summary(lm.res)
coef(lm.res)
plot(lm.res)
R.obs <- Count[-1]/Count[-length(Count)]#
plot(Count[-length(Count)], R.obs, type="p")#
lm.res <- lm(Count[-length(Count)] ~ R.obs)#
abline(lm.res)
lm.res
lm.res <- lm(Count[-length(Count)] ~ R.obs)
plot(Count[-length(Count)], R.obs, type="p")
?lm
plot(Count[-length(Count)], R.obs, type="p")
1/10000
NO=2
t=15
N <- c(NO, numeric(t))
N
numeric(t)
dlog <- function(alpha = 0.01, rd=1, NO=2, t=15){#
	N <- c(NO, numeric(t))#
	for (i in 1:t) N[i + 1] <- {#
		N[i] + rd * N[i] * (1 - alpha * N[i])#
	}#
	return(N)#
}
dlog
dlog()
length(dlog())
dlog.res <- dlog()#
plot(0:15, dlog.res)
dlog.res <- dlog(a=0.1)#
plot(0:15, dlog.res)
dlog.res <- dlog(a=0.001)#
plot(0:15, dlog.res)
dlog.res <- dlog(a=1/10^9)#
plot(0:15, dlog.res)
dlog.res <- dlog(a=1/1000)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=0.1)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=3)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=1.5)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=2)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=2)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=2.5)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=3)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=3, t=100)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=3, t=100)#
plot(0:t, dlog.res, type="b")
tf <- 100#
dlog.res <- dlog(rd=3, t=tf)#
plot(0:tf, dlog.res, type="b")
tf <- 25#
dlog.res <- dlog(rd=3, t=tf)#
plot(0:tf, dlog.res, type="b")
tf <- 50#
dlog.res <- dlog(rd=3, t=tf)#
plot(0:tf, dlog.res, type="b")
tf <- 50#
dlog.res <- dlog(rd=2.5, t=tf)#
plot(0:tf, dlog.res, type="b")
total.incr <- Nts[1:t + 1] - Nts[1:t]
Nts <- dlog(rd=2.5, t=tf)#
plot(0:tf, Nts, type="b")#
#
# per capita population growth increments vs N ##
#
total.incr <- Nts[1:t + 1] - Nts[1:t]
tf <- 15#
Nts <- dlog(rd=2.5, t=tf)#
plot(0:tf, Nts, type="b")#
#
# per capita population growth increments vs N ##
#
total.incr <- Nts[1:t + 1] - Nts[1:t]
}#
tf <- 15#
Nts <- dlog()#
plot(0:tf, Nts, type="b")#
#
# per capita population growth increments vs N ##
#
total.incr <- Nts[1:t + 1] - Nts[1:t]
Nts
total.incr <- Nts[1:t + 1] - Nts[1:t]
total.incr
per.capita.incr <- total.incr/Nts[1:t]
per.capita.incr
plot(Nts[1:t], total.incr)
plot(Nts[1:t], per.capita.incr)
plot(Nts[1:t], total.incr)#
plot(Nts[1:t], per.capita.incr)
tf <- 15#
Nts <- dlog()#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=1)#
plot(0:tf, Nts, type="b"
)
tf <- 15#
Nts <- dlog(NO=10)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=100)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=50)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=1)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=0.1)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=0.001)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=1)#
plot(0:tf, Nts, type="b")
?runif
runif(30)
plot(1:10, runif(30))
plot(1:30, runif(30))
plot(1:30, dunif(30))
dunif(30)
dunif(100)
dunif(1:10)
qunif(30)
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sappy(NOs, function(n) dlog(NO=n))
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))
N
x <- runif(10, 1,10)
x
test <- sapply(x, function(n) n*n)
test
plot(x, test)
test <- sapply(x, function(n) n*a)
test
NOs
test <- sapply(x, function(n) n:10)
test
test <- sapply(x, function(n) c(n,n,n))
test
test <- sapply(x, function(n) c(n,n,n,n))
test
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))#
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30, 0, 5) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))#
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30, 0, 1.1) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))#
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
NOs
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)#
text(t, 1/a, expression(italic("K")==1/a), adj=c(1,0))
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)#
text(t, 1/a, expression(italic("K")==1/alpha), adj=c(1,0))
a.s <- 1/runif(30, min=50, max=1000)		# K from 50 to 1000#
N <- sapply(a.s, function(a) dlog(alpha=a, t=15))
N
matplot(0:t, N, type="l", ylim=c(0,1000), lty=1, lwd=0.75, col=1)
matplot(0:t, N, type="l", ylim=c(0,1000), lty=1, lwd=0.75, col=1)#
text(8, 1/min(a.s), bquote(italic(alpha) == .(round(min(a.s), 3))), adj = c(1, 0.5))#
text(10, 1/max(a.s), bquote(italic(alpha) == .(round(max(a.s), 3))), adj = c(0, 1.2))
a.s <- 1/runif(30, min=50, max=1000)		# K from 50 to 1000#
N <- sapply(a.s, function(a) dlog(alpha=a, t=t))#
matplot(0:t, N, type="l", ylim=c(0,1000), lty=1, lwd=0.75, col=1)#
text(8, 1/min(a.s), bquote(italic(alpha) == .(round(min(a.s), 3))), adj = c(1, 0.5))#
text(10, 1/max(a.s), bquote(italic(alpha) == .(round(max(a.s), 3))), adj = c(0, 1.2))
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))
rd.v <- seq(1.3, 2.8, by=0.3)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))
rd.v <- seq(1.3, 2.8, by=0.3)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)
Ns
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))
tmp
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")
Ns2
str(Ns2)
?str
library(lattice)
library(ggplot2)
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(rd)
p
names(Ns2)
?facet_wrap
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)
p
t <- 30#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)
p
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)#
p
rd.v <- seq(1.3, 5, by=0.3)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)#
#
# presentation o limit cycles#
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)#
p
?facet_wrap
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd, scales="free") #
p
rd.v <- seq(2, 3, by=0.1)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)#
#
# presentation o limit cycles#
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd, scales="free") #
p
rd.v <- seq(2, 3.5, by=0.1)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)#
#
# presentation o limit cycles#
t <- 50#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd, scales="free") #
p
r
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)
r
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))
tmp
?stack
require(stats)#
formula(PlantGrowth)         # check the default formula#
pg <- unstack(PlantGrowth)   # unstack according to this formula#
pg
stack(pg)
as.data.frame(tmp)
tmp.s <- stack(as.data.frame(tmp))
head(tmp.s)
?rep
c(1,2,3)
tmp <- c(1,2,3)
rep(tmp, each(2))
rep(tmp, each=2)
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)#
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))#
tmp.s <- stack(as.data.frame(tmp))#
names(tmp.s) <- c("N", "OLD.column")#
tmp.s$rd <- rep(rd.s, each = t+1)#
tmp.s$time <- rep(0:t, num.rd)
head(tmp.s)
head(rd.s)
rd.s
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)#
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))#
tmp.s <- stack(as.data.frame(tmp))#
names(tmp.s) <- c("N", "OLD.column")#
tmp.s$rd <- rep(rd.s, each = t+1)#
tmp.s$time <- rep(0:t, num.rd)#
N.bif <- subset(tmp.s, time > 0.5*t)#
plot(N ~ rd, data = N, pch=".", xlab=quote("r"["d"]))
plot(N ~ rd, data = N.bif, pch=".", xlab=quote("r"["d"]))
N.bif
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)#
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))#
tmp.s <- stack(as.data.frame(tmp))#
names(tmp.s) <- c("N", "OLD.column")#
tmp.s$rd <- rep(rd.s, each = t+1)#
tmp.s$time <- rep(0:t, num.rd)#
N.bif <- subset(tmp.s, time > 0.5*t)#
plot(N ~ rd, data = N.bif, pch=".", xlab=quote("r"["d"]))
citation(fdrtool)
citation("fdrtool")
citation("ggplot2")
citation("fdrtool")
citation("Heatplus")
library(Heatplus)
citation("Heatplus")
library(vegan)
mantel
?mantel
library(ecodist)
library(help=ecodist)
?mantel
read.table("~/Desktop/1.F.A.1A.3vWWM610_RAST.tsv")
tbl <- read.table("~/Desktop/1.F.A.1A.3vWWM610_RAST.tsv", sep="\t", header=TRUE)
tbl <- read.table("~/Desktop/1.F.A.1A.3vWWM610_RAST.txt", sep="\t", header=TRUE)
unique(tbl[,2])
table(tbl[,2])
library(picante)
?mpd
library(PopGenome)
rm(list=ls())#
#
library(popgenome)
test <- 1:100
test = integer(test)
test = as.integer(test)
as.integer(test)
as.integer(test/18)
as.integer(test % 18)
as.integer(test %% 18)
test <- 0:99
as.integer(test %% 18)
?scale_colour_manual
library(ggplot2)
?scale_colour_manual
?sd
summary(1:10)
summary(0.1:1)
summary(00000.1:0.0001)
?summary
summary(00000.1:0.0001, digits=3)
summary(00000.1:0.0001, digits=5)
summary(attenu, digits = 4
)
summary(attenu, digits = 6
)
rm(list=ls())#
library(ggplot2)
setwd("~/volumes/perl/projects/NY_misc_perl/dev/alignment_var/")
setwd("~/volumes/nyoungb2/perl/projects/NY_misc_perl/dev/alignment_var/")
tbl <- read.delim("aln_var_sum.txt", header=FALSE)
head(tbl)
ggplot(tbl, aes(V2, V3)) +#
	geom_point()
ggplot(tbl, aes(V2, V3, alpha=0.5)) +#
	geom_point(size=0.75)
ggplot(tbl, aes(V2, V3, alpha=0.5)) +#
	geom_point()
