Nt.s <- Nt.fun(NO, r, 1:10)
Nt.s
Nt.s <- Nt.fun(NO, r, 1:(2003-1700))
Nt.s
Nt.s <- Nt.fun(NO, r, 1700:2003)
Nt.s
plot(1700:2003, Nt.s)
plot(1700:2003, Nt.s, log="y")
plot(1700:2003, Nt.s, log="y", type="l")
data(sparrows)
attach(sparrows)
R.obs <- Count[-1]/Count[-length(Count)]
R.obs
plot(Count[-length(Count)], R.obs, type="p")
?lm
lm(Count[-length(Count)] ~ R.obs)
plot(Count[-length(Count)], R.obs, type="p")#
#
lines(lm(Count[-length(Count)] ~ R.obs))
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)#
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)#
group <- gl(2,10,20, labels=c("Ctl","Trt"))#
weight <- c(ctl, trt)#
lm.D9 <- lm(weight ~ group)#
lm.D90 <- lm(weight ~ group - 1) # omitting intercept#
#
anova(lm.D9)#
summary(lm.D90)#
#
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))#
plot(lm.D9, las = 1)      # Residuals, Fitted, ...#
par(opar)
lm.D9
plot(lm.D9, las = 1)
summary(lm.res)
lm.res <- lm(Count[-length(Count)] ~ R.obs)
summary(lm.res)
coef(lm.res)
plot(lm.res)
R.obs <- Count[-1]/Count[-length(Count)]#
plot(Count[-length(Count)], R.obs, type="p")#
lm.res <- lm(Count[-length(Count)] ~ R.obs)#
abline(lm.res)
lm.res
lm.res <- lm(Count[-length(Count)] ~ R.obs)
plot(Count[-length(Count)], R.obs, type="p")
?lm
plot(Count[-length(Count)], R.obs, type="p")
1/10000
NO=2
t=15
N <- c(NO, numeric(t))
N
numeric(t)
dlog <- function(alpha = 0.01, rd=1, NO=2, t=15){#
	N <- c(NO, numeric(t))#
	for (i in 1:t) N[i + 1] <- {#
		N[i] + rd * N[i] * (1 - alpha * N[i])#
	}#
	return(N)#
}
dlog
dlog()
length(dlog())
dlog.res <- dlog()#
plot(0:15, dlog.res)
dlog.res <- dlog(a=0.1)#
plot(0:15, dlog.res)
dlog.res <- dlog(a=0.001)#
plot(0:15, dlog.res)
dlog.res <- dlog(a=1/10^9)#
plot(0:15, dlog.res)
dlog.res <- dlog(a=1/1000)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=0.1)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=3)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=1.5)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=2)#
plot(0:15, dlog.res)
dlog.res <- dlog(rd=2)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=2.5)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=3)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=3, t=100)#
plot(0:15, dlog.res, type="b")
dlog.res <- dlog(rd=3, t=100)#
plot(0:t, dlog.res, type="b")
tf <- 100#
dlog.res <- dlog(rd=3, t=tf)#
plot(0:tf, dlog.res, type="b")
tf <- 25#
dlog.res <- dlog(rd=3, t=tf)#
plot(0:tf, dlog.res, type="b")
tf <- 50#
dlog.res <- dlog(rd=3, t=tf)#
plot(0:tf, dlog.res, type="b")
tf <- 50#
dlog.res <- dlog(rd=2.5, t=tf)#
plot(0:tf, dlog.res, type="b")
total.incr <- Nts[1:t + 1] - Nts[1:t]
Nts <- dlog(rd=2.5, t=tf)#
plot(0:tf, Nts, type="b")#
#
# per capita population growth increments vs N ##
#
total.incr <- Nts[1:t + 1] - Nts[1:t]
tf <- 15#
Nts <- dlog(rd=2.5, t=tf)#
plot(0:tf, Nts, type="b")#
#
# per capita population growth increments vs N ##
#
total.incr <- Nts[1:t + 1] - Nts[1:t]
}#
tf <- 15#
Nts <- dlog()#
plot(0:tf, Nts, type="b")#
#
# per capita population growth increments vs N ##
#
total.incr <- Nts[1:t + 1] - Nts[1:t]
Nts
total.incr <- Nts[1:t + 1] - Nts[1:t]
total.incr
per.capita.incr <- total.incr/Nts[1:t]
per.capita.incr
plot(Nts[1:t], total.incr)
plot(Nts[1:t], per.capita.incr)
plot(Nts[1:t], total.incr)#
plot(Nts[1:t], per.capita.incr)
tf <- 15#
Nts <- dlog()#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=1)#
plot(0:tf, Nts, type="b"
)
tf <- 15#
Nts <- dlog(NO=10)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=100)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=50)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=1)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=0.1)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=0.001)#
plot(0:tf, Nts, type="b")
tf <- 15#
Nts <- dlog(NO=1)#
plot(0:tf, Nts, type="b")
?runif
runif(30)
plot(1:10, runif(30))
plot(1:30, runif(30))
plot(1:30, dunif(30))
dunif(30)
dunif(100)
dunif(1:10)
qunif(30)
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sappy(NOs, function(n) dlog(NO=n))
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))
N
x <- runif(10, 1,10)
x
test <- sapply(x, function(n) n*n)
test
plot(x, test)
test <- sapply(x, function(n) n*a)
test
NOs
test <- sapply(x, function(n) n:10)
test
test <- sapply(x, function(n) c(n,n,n))
test
test <- sapply(x, function(n) c(n,n,n,n))
test
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))#
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30, 0, 5) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))#
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
a <- 0.01#
t <- 15#
NOs <- c(0, runif(30, 0, 1.1) * 1.1 * 1/a)#
N <- sapply(NOs, function(n) dlog(NO=n))#
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)
NOs
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)#
text(t, 1/a, expression(italic("K")==1/a), adj=c(1,0))
matplot(0:t, N, type="l", lty = 1, lwd=0.75, col=1)#
text(t, 1/a, expression(italic("K")==1/alpha), adj=c(1,0))
a.s <- 1/runif(30, min=50, max=1000)		# K from 50 to 1000#
N <- sapply(a.s, function(a) dlog(alpha=a, t=15))
N
matplot(0:t, N, type="l", ylim=c(0,1000), lty=1, lwd=0.75, col=1)
matplot(0:t, N, type="l", ylim=c(0,1000), lty=1, lwd=0.75, col=1)#
text(8, 1/min(a.s), bquote(italic(alpha) == .(round(min(a.s), 3))), adj = c(1, 0.5))#
text(10, 1/max(a.s), bquote(italic(alpha) == .(round(max(a.s), 3))), adj = c(0, 1.2))
a.s <- 1/runif(30, min=50, max=1000)		# K from 50 to 1000#
N <- sapply(a.s, function(a) dlog(alpha=a, t=t))#
matplot(0:t, N, type="l", ylim=c(0,1000), lty=1, lwd=0.75, col=1)#
text(8, 1/min(a.s), bquote(italic(alpha) == .(round(min(a.s), 3))), adj = c(1, 0.5))#
text(10, 1/max(a.s), bquote(italic(alpha) == .(round(max(a.s), 3))), adj = c(0, 1.2))
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))
rd.v <- seq(1.3, 2.8, by=0.3)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))
rd.v <- seq(1.3, 2.8, by=0.3)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)
Ns
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))
tmp
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")
Ns2
str(Ns2)
?str
library(lattice)
library(ggplot2)
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(rd)
p
names(Ns2)
?facet_wrap
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)
p
t <- 30#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)
p
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)#
p
rd.v <- seq(1.3, 5, by=0.3)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)#
#
# presentation o limit cycles#
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd)#
p
?facet_wrap
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd, scales="free") #
p
rd.v <- seq(2, 3, by=0.1)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)#
#
# presentation o limit cycles#
t <- 30#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd, scales="free") #
p
rd.v <- seq(2, 3.5, by=0.1)#
t <- 15#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
matplot(0:t, Ns, type="l", col=1)#
#
# presentation o limit cycles#
t <- 50#
Ns <- data.frame(sapply(rd.v, function(r) dlog(rd=r, t=t)))#
tmp <- data.frame(rd = as.factor(rd.v), t(Ns))#
Ns2 <- reshape(tmp, varying = list(2:ncol(tmp)), idvar="rd", v.names="N", direction="long")#
	#str(Ns2)#
library(ggplot2)#
p <- ggplot(Ns2, aes(time, N)) + #
	geom_line() +#
	facet_wrap(~ rd, scales="free") #
p
r
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)
r
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))
tmp
?stack
require(stats)#
formula(PlantGrowth)         # check the default formula#
pg <- unstack(PlantGrowth)   # unstack according to this formula#
pg
stack(pg)
as.data.frame(tmp)
tmp.s <- stack(as.data.frame(tmp))
head(tmp.s)
?rep
c(1,2,3)
tmp <- c(1,2,3)
rep(tmp, each(2))
rep(tmp, each=2)
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)#
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))#
tmp.s <- stack(as.data.frame(tmp))#
names(tmp.s) <- c("N", "OLD.column")#
tmp.s$rd <- rep(rd.s, each = t+1)#
tmp.s$time <- rep(0:t, num.rd)
head(tmp.s)
head(rd.s)
rd.s
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)#
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))#
tmp.s <- stack(as.data.frame(tmp))#
names(tmp.s) <- c("N", "OLD.column")#
tmp.s$rd <- rep(rd.s, each = t+1)#
tmp.s$time <- rep(0:t, num.rd)#
N.bif <- subset(tmp.s, time > 0.5*t)#
plot(N ~ rd, data = N, pch=".", xlab=quote("r"["d"]))
plot(N ~ rd, data = N.bif, pch=".", xlab=quote("r"["d"]))
N.bif
num.rd <- 201#
t <- 400#
rd.s <- seq(1,3,length=num.rd)#
tmp <- sapply(rd.s, function(r) dlog(rd=r, t=t, NO=99))#
tmp.s <- stack(as.data.frame(tmp))#
names(tmp.s) <- c("N", "OLD.column")#
tmp.s$rd <- rep(rd.s, each = t+1)#
tmp.s$time <- rep(0:t, num.rd)#
N.bif <- subset(tmp.s, time > 0.5*t)#
plot(N ~ rd, data = N.bif, pch=".", xlab=quote("r"["d"]))
citation(fdrtool)
citation("fdrtool")
citation("ggplot2")
citation("fdrtool")
citation("Heatplus")
library(Heatplus)
citation("Heatplus")
library(vegan)
mantel
?mantel
library(ecodist)
library(help=ecodist)
?mantel
read.table("~/Desktop/1.F.A.1A.3vWWM610_RAST.tsv")
tbl <- read.table("~/Desktop/1.F.A.1A.3vWWM610_RAST.tsv", sep="\t", header=TRUE)
tbl <- read.table("~/Desktop/1.F.A.1A.3vWWM610_RAST.txt", sep="\t", header=TRUE)
unique(tbl[,2])
table(tbl[,2])
library(picante)
?mpd
library(PopGenome)
rm(list=ls())#
#
library(popgenome)
test <- 1:100
test = integer(test)
test = as.integer(test)
as.integer(test)
as.integer(test/18)
as.integer(test % 18)
as.integer(test %% 18)
test <- 0:99
as.integer(test %% 18)
?scale_colour_manual
library(ggplot2)
?scale_colour_manual
?sd
summary(1:10)
summary(0.1:1)
summary(00000.1:0.0001)
?summary
summary(00000.1:0.0001, digits=3)
summary(00000.1:0.0001, digits=5)
summary(attenu, digits = 4
)
summary(attenu, digits = 6
)
rm(list=ls())#
#
library(ggplot2)#
library(reshape)#
#
# loading table ##
setwd("~/R/dev/CH4_profile/CH4_profile_corrected/")#
tbl <- read.delim("1108_MA_SSB_CH4_profile.txt")#
#
# editting table ##
tbl$CH4_conc_uM <- tbl$CH4_conc_mM * 100#
#
# making error bars ##
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,#
                      conf.interval=.95, .drop=TRUE) {#
    require(plyr)#
#
    # New version of length which can handle NA's: if na.rm==T, don't count them#
    length2 <- function (x, na.rm=FALSE) {#
        if (na.rm) sum(!is.na(x))#
        else       length(x)#
    }#
#
    # This is does the summary; it's not easy to understand...#
    datac <- ddply(data, groupvars, .drop=.drop,#
                   .fun= function(xx, col, na.rm) {#
                           c( N    = length2(xx[,col], na.rm=na.rm),#
                              mean = mean   (xx[,col], na.rm=na.rm),#
                              sd   = sd     (xx[,col], na.rm=na.rm)#
                              )#
                          },#
                    measurevar,#
                    na.rm#
             )#
#
    # Rename the "mean" column    #
    datac <- rename(datac, c("mean"=measurevar))#
#
    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean#
#
    # Confidence interval multiplier for standard error#
    # Calculate t-statistic for confidence interval: #
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1#
    ciMult <- qt(conf.interval/2 + .5, datac$N-1)#
    datac$ci <- datac$se * ciMult#
#
    return(datac)#
}#
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,#
                           na.rm=FALSE, .drop=TRUE) {#
    require(plyr)#
#
    # Measure var on left, idvar + between vars on right of formula.#
    data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,#
     .fun = function(xx, col, na.rm) {#
        c(subjMean = mean(xx[,col], na.rm=na.rm))#
      },#
      measurevar,#
      na.rm#
    )#
#
    # Put the subject means with original data#
    data <- merge(data, data.subjMean)#
#
    # Get the normalized data in a new column#
    measureNormedVar <- paste(measurevar, "_norm", sep="")#
    data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +#
                               mean(data[,measurevar], na.rm=na.rm)#
#
    # Remove this subject mean column#
    data$subjMean <- NULL#
#
    return(data)#
}#
#
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,#
                            idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {#
#
  # Ensure that the betweenvars and withinvars are factors#
  factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],#
    FUN=is.factor, FUN.VALUE=logical(1))#
#
  if (!all(factorvars)) {#
    nonfactorvars <- names(factorvars)[!factorvars]#
    message("Automatically converting the following non-factors to factors: ",#
            paste(nonfactorvars, collapse = ", "))#
    data[nonfactorvars] <- lapply(data[nonfactorvars], factor)#
  }#
#
  # Get the means from the un-normed data#
  datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),#
                     na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)#
#
  # Drop all the unused columns (these will be calculated with normed data)#
  datac$sd <- NULL#
  datac$se <- NULL#
  datac$ci <- NULL#
#
  # Norm each subject's data#
  ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)#
#
  # This is the name of the new column#
  measurevar_n <- paste(measurevar, "_norm", sep="")#
#
  # Collapse the normed data - now we can treat between and within vars the same#
  ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),#
                      na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)#
#
  # Apply correction from Morey (2008) to the standard error and confidence interval#
  #  Get the product of the number of conditions of within-S variables#
  nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,#
                           FUN.VALUE=numeric(1)))#
  correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )#
#
  # Apply the correction factor#
  ndatac$sd <- ndatac$sd * correctionFactor#
  ndatac$se <- ndatac$se * correctionFactor#
  ndatac$ci <- ndatac$ci * correctionFactor#
#
  # Combine the un-normed means with the normed results#
  merge(datac, ndatac)#
}#
#
tbl.error <- summarySEwithin(tbl, #
		betweenvars=c("Lake"),#
		withinvars="Depth",#
		measurevar="CH4_conc_uM")#
#
# tbl.error edit ##
tbl.error$Depth <- as.numeric(as.character(tbl.error$Depth))#
tbl.error$Lake <- gsub("MA", "Mary Lake", tbl.error$Lake)#
tbl.error$Lake <- gsub("SSB", "South Sparkling Bog", tbl.error$Lake)#
#
# marking which are not replicated ##
tbl.error$replicated <- rep(1, nrow(tbl.error))#
tbl.error[is.na(tbl.error$sd), "replicated"] <- 2#
tbl.error$replicated <- as.character(tbl.error$replicated)
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none",#
		text = element_text(size=14)#
		)
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (μM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none",#
		text = element_text(size=14)#
		)
ggsave("1108_MA_SSB_CH4_profile.pdf")
?element_text
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none",#
		text = element_text(family="arial", size=14)#
		)
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none",#
		text = element_text(family="courier", size=14)#
		)
?theme_grey
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none",#
		#text = element_text(family="courier", size=14)#
		) +#
	theme_grey(14, "arial")
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none"#
		#text = element_text(family="courier", size=14)#
		) +#
	theme_grey(14, "arial")
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none"#
		#text = element_text(family="courier", size=14)#
		) +#
	theme_grey(14, "sans")
plotting ##
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none"#
		#text = element_text(family="courier", size=14)#
		) +#
	theme_grey(14, "helvetica")
plotting ##
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none"#
		#text = element_text(family="courier", size=14)#
		) +#
	theme_grey(14, "HEL")
?pdfFonts
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none"#
		#text = element_text(family="courier", size=14)#
		) +#
	theme_grey(14, "Helvetica")
ggplot(tbl.error, aes(Depth, CH4_conc_uM, group=Lake, shape=replicated)) +#
	geom_point() +#
	geom_line() +#
	geom_linerange(aes(ymin=CH4_conc_uM - sd, ymax=CH4_conc_uM + sd)) +#
	scale_x_reverse() +#
	coord_flip() + #
	facet_grid(. ~ Lake) +#
	labs(y="CH4 (uM)", x="Depth (m)") +#
	scale_shape_manual(values=c(16,1)) +#
	theme(#
		legend.position = "none",#
		text = element_text(family="Helvetica", size=14)#
		)
ggsave("1108_MA_SSB_CH4_profile.pdf")
ggsave("1108_MA_SSB_CH4_profile.pdf")
rm(list=ls())#
#
library(adgenet)
rm(list=ls())#
#
library(adegenet)
rm(list=ls())#
#
library(adegenet)#
#
data(nancycats)
is.genind(nancycats)
nancycats
?fasta2genlight
rm(list=ls())#
#
library(adegenet)#
#
setwd("~/volumes/gtl-shared/alignments/genome/mugsy/130308_gtlenv-OTU2/")#
#
core.snp <- fasta2genlight("gtlenv_OTU_core.fna", chunkSize=4)
?fasta2genlight
?fasta2genlight
rm(list=ls())#
#
library(ggplot2)
rm(list=ls())#
#
library(ggplot2)#
#
setwd("~/volumes/nyoungb2/perl/projects/NY_misc_perl/dev/sliding_percent_id/")
tbl <- read.table("test_pop_out.txt", sep="\t")
head(tbl)
colnames(tbl) <- c("start", "end", "percent_ID", "comparison", "population")
ggplot(tbl, aes(start, percent_ID, group=population, color=population)) +#
	geom_point() +#
	geom_line() +#
	facet_grid(comparison ~ .)
ggplot(tbl, aes(start, percent_ID, group=population, color=population)) +#
	geom_point() +#
	geom_line() +#
	facet_grid(comparison ~ .)
rm(list=ls())#
#
library(ggplot2)#
#
setwd("~/volumes/nyoungb2/perl/projects/NY_misc_perl/dev/sliding_percent_id/")#
#
tbl <- read.table("test_pop_out.txt", sep="\t")#
colnames(tbl) <- c("start", "end", "percent_ID", "comparison", "population")#
#
ggplot(tbl, aes(start, percent_ID, group=population, color=population)) +#
	geom_point() +#
	geom_line() +#
	facet_grid(comparison ~ .)
